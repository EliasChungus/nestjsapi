var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.757,1,1.757]],["body/controllers/AppController.html",[0,1.187,1,1.187,2,0.956,3,0.213,4,0.158,5,0.185,6,0.956,7,0.213,8,0.586,9,1.943,10,2.539,11,1.603,12,2.539,13,1.966,14,1.966,15,2.973,16,1.603,17,1.966,18,2.539,19,1.172,20,2.064,21,1.139,22,4.157,23,0.044,24,1.966,25,1.239,26,1.172,27,1.497,28,1.607,29,1.556,30,2.539,31,1.239,32,2.21,33,1.172,34,2.304,35,1.966,36,1.172,37,4.516,38,1.172,39,1.966,40,1.966,41,1.172,42,2.973,43,1.172,44,1.966,45,1.172,46,1.172,47,1.172,48,1.172,49,2.973,50,1.172,51,1.172,52,1.172,53,1.172,54,1.172,55,0.814,56,1.172,57,1.966,58,1.172,59,1.172,60,1.966,61,1.172,62,1.966,63,0.727,64,1.172,65,1.172,66,3.391,67,2.539,68,1.172,69,1.966,70,1.172,71,0.185,72,1.196,73,0.956,74,1.196,75,0.956,76,1.561,77,1.172,78,1.172,79,0.623,80,0.707,81,1.172,82,1.603,83,1.065,84,1.172,85,0.623,86,1.172,87,1.365,88,1.172,89,0.213,90,0.213,91,0.491,92,1.763,93,1.603,94,1.172,95,1.172,96,1.172,97,1.389,98,1.172,99,1.172,100,1.172,101,1.172,102,1.172,103,1.966,104,1.172,105,1.172,106,1.172,107,2.539,108,1.172,109,2.539,110,1.603,111,1.966,112,1.365,113,1.172,114,3.586,115,3.586,116,1.172,117,1.966,118,1.603,119,1.365,120,2.539,121,0.552,122,1.172,123,2.539,124,0.814,125,1.172,126,2.973,127,1.172,128,1.172,129,1.172,130,1.172,131,1.172,132,1.172,133,0.814,134,1.172,135,1.172,136,0.015,137,0.015]],["title/modules/AppModule.html",[138,1.221,139,1.757]],["body/modules/AppModule.html",[1,2.541,2,2.972,3,0.472,4,0.351,5,0.41,23,0.043,63,0.949,71,0.41,72,2.346,73,2.119,74,2.346,75,2.119,89,0.472,90,0.472,136,0.028,137,0.028,138,1.765,139,3.396,140,1.224,141,1.224,142,1.568,143,1.568,144,1.224,145,2.541,146,1.568,147,2.119,148,2.119,149,2.119,150,2.646,151,2.346,152,2.646,153,2.089,154,2.2,155,1.568,156,1.568,157,2.597,158,2.972,159,2.597,160,2.597,161,1.804,162,2.597,163,2.119]],["title/injectables/AppService.html",[152,1.546,164,0.115]],["body/injectables/AppService.html",[3,0.673,4,0.501,5,0.584,7,0.673,8,1.374,23,0.043,25,1.104,31,1.104,34,2.172,63,0.673,71,0.584,89,0.673,90,0.673,97,1.238,136,0.035,137,0.035,152,2.449,164,0.183,165,0.983,166,3.022,167,5.251,168,3.704,169,3.704,170,3.704]],["title/modules/AuthModule.html",[138,1.221,150,1.546]],["body/modules/AuthModule.html",[3,0.443,4,0.33,5,0.385,23,0.044,63,0.964,71,0.385,82,1.99,83,2.274,85,1.852,89,0.443,90,0.443,136,0.026,137,0.026,138,1.706,140,1.149,141,1.149,142,1.473,143,1.473,144,1.149,145,2.455,146,2.455,150,2.906,151,2.299,154,2.104,155,1.473,156,1.473,158,2.843,163,1.99,171,1.99,172,2.439,173,1.99,174,1.99,175,2.593,176,2.593,177,2.439,178,1.99,179,2.439,180,3.485,181,1.149,182,2.439,183,1.694,184,1.473,185,1.694,186,2.439,187,3.485,188,1.694,189,1.694,190,2.439,191,1.99,192,1.99,193,2.439,194,2.439,195,2.439,196,2.439,197,2.439]],["title/injectables/AuthService.html",[83,1.221,164,0.115]],["body/injectables/AuthService.html",[3,0.434,4,0.323,5,0.377,7,0.434,8,1.024,9,1.814,16,2.802,21,1.067,23,0.044,25,1.199,27,1.505,28,1.505,29,1.505,31,1.024,32,1.618,34,2.283,55,1.66,63,0.731,71,0.377,76,2.071,83,1.441,89,0.434,90,0.434,91,1.441,92,2.385,97,1.344,121,1.894,136,0.026,137,0.026,164,0.136,165,0.634,183,1.66,198,1.95,199,3.435,200,2.391,201,2.283,202,4.993,203,2.391,204,3.435,205,2.391,206,3.435,207,4.395,208,2.391,209,2.074,210,2.391,211,1.66,212,2.391,213,2.391,214,1.443,215,3.435,216,2.391,217,1.95,218,1.95,219,2.391,220,2.391,221,2.391,222,2.391]],["title/injectables/JwtAuthGuard.html",[85,1.546,164,0.115]],["body/injectables/JwtAuthGuard.html",[3,0.527,4,0.392,5,0.457,7,0.527,8,1.172,21,1.043,23,0.044,25,1.172,27,1.472,28,1.472,29,1.472,31,0.865,63,0.869,71,0.457,85,2.089,89,0.527,90,0.527,91,1.217,97,1.314,112,2.014,121,1.366,136,0.03,137,0.03,164,0.156,165,0.77,181,1.366,185,2.014,188,2.014,223,3.638,224,2.014,225,2.089,226,3.931,227,3.931,228,2.9,229,5.152,230,2.9,231,3.931,232,4.781,233,2.9,234,2.9,235,2.366,236,2.014,237,1.751,238,2.014,239,3.207,240,2.9,241,2.9,242,2.9,243,2.9]],["title/injectables/JwtStrategy.html",[164,0.115,175,1.546]],["body/injectables/JwtStrategy.html",[3,0.54,4,0.402,5,0.469,7,0.54,8,1.192,9,1.69,21,0.789,23,0.044,25,1.192,27,1.113,28,1.113,29,1.113,31,0.886,55,2.064,63,0.878,71,0.469,89,0.54,90,0.54,91,1.894,97,0.993,136,0.03,137,0.03,164,0.159,165,0.789,175,2.124,181,1.4,184,1.794,185,2.064,189,2.064,192,2.424,209,1.794,217,2.424,225,2.124,238,2.064,244,2.424,245,3.26,246,3.26,247,2.972,248,3.996,249,2.972,250,2.972,251,2.424,252,2.064,253,2.424,254,2.972,255,2.972,256,2.972,257,2.972,258,2.972,259,2.424,260,2.972,261,2.972]],["title/injectables/LocalAuthGuard.html",[80,1.757,164,0.115]],["body/injectables/LocalAuthGuard.html",[3,0.706,4,0.525,5,0.612,23,0.043,63,0.863,71,0.612,80,2.865,89,0.706,90,0.706,136,0.036,137,0.036,164,0.188,165,1.031,181,1.83,224,2.697,225,2.522,235,3.168,262,3.168,263,4.746]],["title/injectables/LocalStrategy.html",[164,0.115,176,1.546]],["body/injectables/LocalStrategy.html",[3,0.499,4,0.371,5,0.433,7,0.499,8,1.129,9,1.623,21,1.005,23,0.044,25,1.129,27,1.418,28,1.418,29,1.418,31,0.819,32,1.784,34,2.388,63,0.849,71,0.433,76,2.042,83,2.126,89,0.499,90,0.499,91,1.152,97,0.918,119,1.906,121,1.293,136,0.029,137,0.029,164,0.15,165,0.729,176,2.012,178,2.24,181,1.293,209,1.658,211,1.906,214,2.821,225,2.012,237,1.658,238,1.906,245,3.089,246,3.089,251,2.24,252,1.906,253,2.24,264,2.24,265,2.746,266,2.746,267,3.787,268,2.746,269,2.24,270,3.787,271,2.746,272,2.746]],["title/injectables/PostService.html",[74,1.371,164,0.115]],["body/injectables/PostService.html",[3,0.343,4,0.255,5,0.297,7,0.343,8,0.859,9,1.987,11,2.349,20,2.717,21,1.323,23,0.044,25,1.325,27,1.664,28,1.664,29,1.664,31,1.257,32,2.349,63,0.635,66,3.192,71,0.297,74,1.357,79,1.002,89,0.343,90,0.343,91,0.791,97,1.409,110,2.349,121,1.357,133,2.927,136,0.022,137,0.022,153,1.641,161,1.309,164,0.114,165,0.5,237,1.138,273,1.537,274,2.88,275,2.88,276,1.537,277,1.885,278,2.851,279,2.88,280,3.495,281,1.885,282,2.88,283,4.767,284,1.885,285,1.885,286,1.885,287,3.495,288,2.88,289,1.885,290,3.192,291,2.88,292,1.885,293,1.885,294,2.851,295,2.349,296,2.851,297,2.851,298,1.885,299,2.851,300,1.885,301,1.885,302,1.885,303,1.885,304,1.885,305,1.885]],["title/injectables/PrismaService.html",[153,1.221,164,0.115]],["body/injectables/PrismaService.html",[3,0.634,4,0.472,5,0.55,7,0.634,8,1.324,9,1.828,23,0.043,25,1.04,31,1.04,63,0.807,71,0.55,79,1.854,89,0.634,90,0.634,136,0.034,137,0.034,153,1.862,164,0.176,165,0.926,211,2.423,225,2.359,306,2.846,307,3.983,308,5.423,309,3.489,310,3.489,311,3.489]],["title/injectables/UserService.html",[72,1.371,164,0.115]],["body/injectables/UserService.html",[3,0.323,4,0.24,5,0.28,7,0.323,8,0.821,9,1.965,20,2.635,21,1.302,23,0.044,25,1.294,27,1.625,28,1.625,29,1.625,31,1.224,32,2.312,63,0.612,71,0.28,72,1.297,76,1.934,79,0.945,89,0.323,90,0.323,91,0.746,97,1.372,121,1.297,133,2.85,136,0.021,137,0.021,153,1.592,161,1.235,164,0.109,165,0.472,214,1.073,237,1.073,276,1.45,278,3.348,290,3.095,294,2.749,295,2.246,296,2.749,297,2.749,299,2.749,307,1.45,312,1.45,313,2.753,314,2.753,315,2.753,316,2.246,317,1.778,318,2.753,319,3.369,320,1.778,321,2.753,322,4.678,323,1.778,324,2.753,325,1.778,326,1.778,327,1.778,328,3.369,329,2.753,330,1.778,331,2.753,332,1.778,333,1.778,334,1.778,335,1.778,336,1.778,337,1.778,338,1.45,339,1.778,340,1.778,341,1.778,342,1.778,343,1.778,344,1.778,345,1.45,346,1.778,347,1.778,348,1.778,349,1.778,350,1.778,351,1.778,352,1.778,353,1.778,354,1.778,355,1.778]],["title/modules/UsersModule.html",[138,1.221,151,1.371]],["body/modules/UsersModule.html",[3,0.602,4,0.448,5,0.522,23,0.043,63,0.78,71,0.522,89,0.602,90,0.602,136,0.033,137,0.033,138,1.999,140,1.561,141,1.561,142,2,143,2,144,1.561,145,2.876,146,2.876,151,2.565,154,2.592,155,2,156,2,201,2.686,356,2.703,357,2.703,358,2.703,359,3.313,360,3.313]],["title/injectables/UsersService.html",[164,0.115,201,1.371]],["body/injectables/UsersService.html",[3,0.475,4,0.354,5,0.413,7,0.475,8,1.092,9,1.582,21,1.121,23,0.044,25,1.092,27,0.979,28,0.979,29,0.979,31,0.78,32,1.725,34,1.99,63,0.475,71,0.413,76,1.725,89,0.665,90,0.475,92,2.934,93,3.446,97,0.874,136,0.028,137,0.028,164,0.145,165,0.694,201,1.725,209,3.014,214,2.763,218,2.134,259,3.733,316,3.446,361,1.817,362,2.543,363,3.662,364,3.662,365,2.616,366,2.134,367,2.134,368,2.987,369,3.662,370,3.662,371,3.662,372,3.662,373,3.662,374,2.616,375,2.616,376,2.616,377,2.616,378,2.616,379,2.616]],["title/coverage.html",[380,2.736]],["body/coverage.html",[0,1.67,1,1.67,5,0.436,6,2.257,21,0.734,23,0.043,72,1.303,74,1.303,80,1.67,83,1.161,85,1.47,87,1.921,119,1.921,136,0.029,137,0.029,144,1.303,152,1.47,153,1.161,164,0.216,166,2.257,175,1.47,176,1.47,184,1.67,198,2.257,201,1.303,223,2.257,224,2.643,236,1.921,244,2.257,262,2.257,264,2.257,273,2.257,306,2.257,312,2.257,345,2.257,361,1.921,380,1.921,381,2.767,382,2.767,383,2.767,384,5.646,385,2.767,386,3.807,387,2.767,388,3.55,389,4.352,390,4.915,391,4.688,392,2.257,393,3.807,394,2.767,395,2.767]],["title/dependencies.html",[141,1.645,396,1.995]],["body/dependencies.html",[23,0.044,71,0.567,79,1.91,136,0.034,137,0.034,141,1.693,181,1.693,183,2.495,188,2.495,189,2.495,252,3.437,269,2.931,397,4.949,398,3.593,399,3.593,400,3.593,401,3.593,402,3.593,403,3.593,404,3.593,405,3.593,406,3.593,407,3.593,408,3.593,409,3.593,410,3.593,411,3.593,412,3.593]],["title/miscellaneous/functions.html",[413,1.152,414,2.848]],["body/miscellaneous/functions.html",[7,0.782,23,0.038,136,0.038,137,0.038,144,2.522,392,3.508,413,2.026,414,3.508,415,4.3]],["title/index.html",[7,0.444,416,2.446,417,2.446]],["body/index.html",[4,0.383,23,0.043,124,1.966,136,0.029,137,0.029,338,2.31,380,1.966,418,2.832,419,2.832,420,3.868,421,2.832,422,2.832,423,2.832,424,2.832,425,2.832,426,2.832,427,2.31,428,4.405,429,2.832,430,2.832,431,2.832,432,2.832,433,4.405,434,5.236,435,2.832,436,2.832,437,2.832,438,5.116,439,2.832,440,2.832,441,3.868,442,2.832,443,2.832,444,2.832,445,2.832,446,3.868,447,3.868,448,2.832,449,2.832,450,2.832,451,3.868,452,3.868,453,2.832,454,2.832,455,2.832,456,2.832,457,2.832,458,2.31,459,2.832,460,2.832,461,2.832,462,2.832,463,2.832,464,2.832,465,2.832,466,2.832,467,2.832,468,2.832,469,2.832,470,2.832,471,2.832,472,2.832,473,2.832,474,2.31]],["title/modules.html",[140,1.856]],["body/modules.html",[23,0.037,136,0.037,137,0.037,139,2.478,140,1.934,150,2.181,151,1.934,458,4.282,475,5.249,476,5.249,477,5.249]],["title/overview.html",[478,3.214]],["body/overview.html",[0,1.645,23,0.043,72,2.034,74,2.034,83,2.174,136,0.029,137,0.029,138,1.143,139,3.383,140,1.284,141,1.284,142,1.645,143,1.645,144,1.284,145,1.645,146,1.645,147,2.223,148,2.223,149,2.223,150,2.938,151,2.442,152,2.294,153,1.811,154,2.274,155,1.645,156,1.645,165,0.723,171,2.223,173,2.223,174,2.223,175,2.294,176,2.294,201,2.442,356,2.223,357,2.223,358,2.223,368,2.223,478,2.223,479,2.725,480,2.725]],["title/properties.html",[362,2.424,396,1.995]],["body/properties.html",[23,0.043,124,2.934,136,0.038,137,0.038,362,2.934,427,3.446,474,3.446,481,4.225,482,4.225,483,4.225]],["title/miscellaneous/typealiases.html",[413,1.152,484,3.491]],["body/miscellaneous/typealiases.html",[7,0.782,21,1.141,23,0.038,76,2.377,136,0.038,137,0.038,361,2.986,413,2.026,485,4.3,486,4.3]],["title/miscellaneous/variables.html",[413,1.152,487,2.848]],["body/miscellaneous/variables.html",[4,0.472,7,0.634,21,1.178,23,0.043,34,1.644,87,3.083,112,2.423,118,2.846,136,0.034,137,0.034,184,2.68,191,3.621,236,3.083,239,2.846,366,3.983,367,4.192,388,2.846,413,1.644,487,2.846,488,4.882,489,3.489,490,3.489,491,3.489,492,3.489,493,3.489,494,3.489,495,3.489,496,3.489,497,3.489]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":384,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":482,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":410,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":405,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":390,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":385,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":386,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":391,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":387,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":393,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":368,"title":{},"body":{"injectables/UsersService.html":{},"overview.html":{}}}],["1.0.0",{"_index":407,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":480,"title":{},"body":{"overview.html":{}}}],["10.0.0",{"_index":397,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":399,"title":{},"body":{"dependencies.html":{}}}],["10.1.1",{"_index":398,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":371,"title":{},"body":{"injectables/UsersService.html":{}}}],["3",{"_index":479,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":406,"title":{},"body":{"dependencies.html":{}}}],["5.5.2",{"_index":404,"title":{},"body":{"dependencies.html":{}}}],["60s",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{}}}],["7.1.14",{"_index":403,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":412,"title":{},"body":{"dependencies.html":{}}}],["access_token",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":341,"title":{},"body":{"injectables/UserService.html":{}}}],["adress",{"_index":128,"title":{},"body":{"controllers/AppController.html":{}}}],["affected",{"_index":335,"title":{},"body":{"injectables/UserService.html":{}}}],["aliases",{"_index":485,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":459,"title":{},"body":{"index.html":{}}}],["app",{"_index":436,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":426,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":139,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":152,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{}}}],["auth.guard",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":224,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:12",{"_index":233,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:7",{"_index":230,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":84,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/constants",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/jwt",{"_index":86,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/local",{"_index":81,"title":{},"body":{"controllers/AppController.html":{}}}],["authguard",{"_index":235,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":226,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":263,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":150,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":124,"title":{},"body":{"controllers/AppController.html":{},"index.html":{},"properties.html":{}}}],["authoremail",{"_index":120,"title":{},"body":{"controllers/AppController.html":{}}}],["authservice",{"_index":83,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{}}}],["backers",{"_index":460,"title":{},"body":{"index.html":{}}}],["body",{"_index":67,"title":{},"body":{"controllers/AppController.html":{}}}],["bootstrap",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":477,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":475,"title":{},"body":{"modules.html":{}}}],["building",{"_index":421,"title":{},"body":{"index.html":{}}}],["business",{"_index":342,"title":{},"body":{"injectables/UserService.html":{}}}],["canactivate",{"_index":227,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":231,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["changeme",{"_index":370,"title":{},"body":{"injectables/UsersService.html":{}}}],["class",{"_index":90,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["class/interface",{"_index":376,"title":{},"body":{"injectables/UsersService.html":{}}}],["client",{"_index":334,"title":{},"body":{"injectables/UserService.html":{}}}],["cluster_appmodule",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":356,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":357,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":358,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complex",{"_index":492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":125,"title":{},"body":{"controllers/AppController.html":{}}}],["const",{"_index":121,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["constants",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":265,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(prisma",{"_index":276,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":237,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["constructor(reflector",{"_index":228,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(usersservice",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["contains",{"_index":117,"title":{},"body":{"controllers/AppController.html":{}}}],["content",{"_index":115,"title":{},"body":{"controllers/AppController.html":{}}}],["context",{"_index":234,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.getclass",{"_index":242,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":241,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{},"overview.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["coverage",{"_index":380,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":118,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/variables.html":{}}}],["createdraft",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["createdraft(postdata",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["createpost",{"_index":274,"title":{},"body":{"injectables/PostService.html":{}}}],["createpost(data",{"_index":279,"title":{},"body":{"injectables/PostService.html":{}}}],["creates",{"_index":127,"title":{},"body":{"controllers/AppController.html":{}}}],["createuser",{"_index":313,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(data",{"_index":318,"title":{},"body":{"injectables/UserService.html":{}}}],["cursor",{"_index":297,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["data",{"_index":133,"title":{},"body":{"controllers/AppController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["declarations",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["default",{"_index":366,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":69,"title":{},"body":{"controllers/AppController.html":{}}}],["delete('post/:id",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["deletepost",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/PostService.html":{}}}],["deletepost(@param('id",{"_index":134,"title":{},"body":{"controllers/AppController.html":{}}}],["deletepost(id",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["deletepost(where",{"_index":282,"title":{},"body":{"injectables/PostService.html":{}}}],["deleteuser",{"_index":314,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteuser(where",{"_index":321,"title":{},"body":{"injectables/UserService.html":{}}}],["dependencies",{"_index":141,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":427,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":437,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":381,"title":{},"body":{"coverage.html":{}}}],["e.g",{"_index":344,"title":{},"body":{"injectables/UserService.html":{}}}],["e2e",{"_index":448,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":422,"title":{},"body":{"index.html":{}}}],["email",{"_index":126,"title":{},"body":{"controllers/AppController.html":{}}}],["entity",{"_index":378,"title":{},"body":{"injectables/UsersService.html":{}}}],["example",{"_index":433,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":232,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["expiresin",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":89,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":401,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":225,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{}}}],["extractjwt",{"_index":250,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":255,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":257,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fetch",{"_index":103,"title":{},"body":{"controllers/AppController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filter",{"_index":113,"title":{},"body":{"controllers/AppController.html":{}}}],["findone",{"_index":363,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(username",{"_index":364,"title":{},"body":{"injectables/UsersService.html":{}}}],["framework",{"_index":420,"title":{},"body":{"index.html":{}}}],["function",{"_index":345,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["functions",{"_index":414,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":333,"title":{},"body":{"injectables/UserService.html":{}}}],["get('feed",{"_index":108,"title":{},"body":{"controllers/AppController.html":{}}}],["get('filtered",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["get('post/:id",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["get('profile",{"_index":100,"title":{},"body":{"controllers/AppController.html":{}}}],["getfilteredposts",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["getfilteredposts(searchstring",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello",{"_index":167,"title":{},"body":{"injectables/AppService.html":{}}}],["getpostbyid",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["getpostbyid(@param('id",{"_index":105,"title":{},"body":{"controllers/AppController.html":{}}}],["getpostbyid(id",{"_index":43,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(@request",{"_index":101,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["getpublishedposts",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":416,"title":{"index.html":{}},"body":{}}],["grow",{"_index":455,"title":{},"body":{"index.html":{}}}],["guess",{"_index":373,"title":{},"body":{"injectables/UsersService.html":{}}}],["hello",{"_index":169,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":338,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["https://nestjs.com",{"_index":471,"title":{},"body":{"index.html":{}}}],["id",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["identifier",{"_index":382,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":256,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":310,"title":{},"body":{"injectables/PrismaService.html":{}}}],["import",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["importing",{"_index":331,"title":{},"body":{"injectables/UserService.html":{}}}],["imports",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":164,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":165,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["installation",{"_index":432,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":435,"title":{},"body":{"index.html":{}}}],["instead",{"_index":491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is_public_key",{"_index":236,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ispublic",{"_index":239,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["john",{"_index":369,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":462,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":85,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":254,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":175,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":468,"title":{},"body":{"index.html":{}}}],["keep",{"_index":493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":474,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":452,"title":{},"body":{"index.html":{}}}],["literal",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["local",{"_index":269,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":80,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":176,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logic",{"_index":343,"title":{},"body":{"injectables/UserService.html":{}}}],["login",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":96,"title":{},"body":{"controllers/AppController.html":{}}}],["login(req",{"_index":52,"title":{},"body":{"controllers/AppController.html":{}}}],["login(user",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["maria",{"_index":372,"title":{},"body":{"injectables/UsersService.html":{}}}],["matching",{"_index":137,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":409,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":413,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":451,"title":{},"body":{"index.html":{}}}],["mode",{"_index":441,"title":{},"body":{"index.html":{}}}],["model",{"_index":336,"title":{},"body":{"injectables/UserService.html":{}}}],["module",{"_index":138,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":140,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":465,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":469,"title":{},"body":{"index.html":{}}}],["name",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":428,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":473,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":400,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":402,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":119,"title":{},"body":{"controllers/AppController.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["node.js",{"_index":419,"title":{},"body":{"index.html":{}}}],["npm",{"_index":434,"title":{},"body":{"index.html":{}}}],["null",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":295,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["number(id",{"_index":107,"title":{},"body":{"controllers/AppController.html":{}}}],["object",{"_index":489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onmoduleinit",{"_index":308,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":453,"title":{},"body":{"index.html":{}}}],["optional",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{}}}],["orderby",{"_index":299,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["out",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["outside",{"_index":495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overview",{"_index":478,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":396,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":65,"title":{},"body":{"controllers/AppController.html":{}}}],["param('searchstring",{"_index":116,"title":{},"body":{"controllers/AppController.html":{}}}],["parameters",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":290,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["pass",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":252,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":253,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":245,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{}}}],["payload",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":260,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":261,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["place",{"_index":340,"title":{},"body":{"injectables/UserService.html":{}}}],["please",{"_index":463,"title":{},"body":{"index.html":{}}}],["post",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"injectables/PostService.html":{}}}],["post('auth/login",{"_index":95,"title":{},"body":{"controllers/AppController.html":{}}}],["post('post",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["post('user",{"_index":60,"title":{},"body":{"controllers/AppController.html":{}}}],["post(postwhereuniqueinput",{"_index":285,"title":{},"body":{"injectables/PostService.html":{}}}],["post.service",{"_index":75,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["postdata",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["postmodel",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["posts",{"_index":110,"title":{},"body":{"controllers/AppController.html":{},"injectables/PostService.html":{}}}],["posts(params",{"_index":288,"title":{},"body":{"injectables/PostService.html":{}}}],["posts/:searchstring",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["postservice",{"_index":74,"title":{"injectables/PostService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["postwhereuniqueinput",{"_index":287,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma",{"_index":278,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["prisma.postcreateinput",{"_index":280,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postorderbywithrelationinput",{"_index":300,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postupdateinput",{"_index":303,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postwhereinput",{"_index":298,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.postwhereuniqueinput",{"_index":283,"title":{},"body":{"injectables/PostService.html":{}}}],["prisma.service",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["prisma.usercreateinput",{"_index":319,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userorderbywithrelationinput",{"_index":350,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userupdateinput",{"_index":353,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userwhereinput",{"_index":349,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userwhereuniqueinput",{"_index":322,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma/client",{"_index":79,"title":{},"body":{"controllers/AppController.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":307,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["prismaservice",{"_index":153,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":92,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":443,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":418,"title":{},"body":{"index.html":{}}}],["project",{"_index":454,"title":{},"body":{"index.html":{}}}],["promise",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":362,"title":{"properties.html":{}},"body":{"injectables/UsersService.html":{},"properties.html":{}}}],["provide",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@get('feed",{"_index":50,"title":{},"body":{"controllers/AppController.html":{}}}],["publish",{"_index":130,"title":{},"body":{"controllers/AppController.html":{}}}],["published",{"_index":109,"title":{},"body":{"controllers/AppController.html":{}}}],["publishpost",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["publishpost(@param('id",{"_index":131,"title":{},"body":{"controllers/AppController.html":{}}}],["publishpost(id",{"_index":56,"title":{},"body":{"controllers/AppController.html":{}}}],["put",{"_index":68,"title":{},"body":{"controllers/AppController.html":{}}}],["put('publish/:id",{"_index":57,"title":{},"body":{"controllers/AppController.html":{}}}],["read",{"_index":464,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":375,"title":{},"body":{"injectables/UsersService.html":{}}}],["reflect",{"_index":408,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":229,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["repository",{"_index":431,"title":{},"body":{"index.html":{}}}],["representing",{"_index":377,"title":{},"body":{"injectables/UsersService.html":{}}}],["req",{"_index":49,"title":{},"body":{"controllers/AppController.html":{}}}],["req.user",{"_index":102,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":64,"title":{},"body":{"controllers/AppController.html":{}}}],["required",{"_index":123,"title":{},"body":{"controllers/AppController.html":{}}}],["reset",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["result",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":136,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":97,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{}}}],["run",{"_index":438,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":411,"title":{},"body":{"dependencies.html":{}}}],["safe",{"_index":494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scalable",{"_index":423,"title":{},"body":{"index.html":{}}}],["searchstring",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["secret",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":258,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":424,"title":{},"body":{"index.html":{}}}],["service",{"_index":332,"title":{},"body":{"injectables/UserService.html":{}}}],["services",{"_index":339,"title":{},"body":{"injectables/UserService.html":{}}}],["setmetadata(is_public_key",{"_index":497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":425,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{}}}],["signupuser",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["signupuser(userdata",{"_index":59,"title":{},"body":{"controllers/AppController.html":{}}}],["single",{"_index":104,"title":{},"body":{"controllers/AppController.html":{}}}],["skip",{"_index":294,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sponsors",{"_index":457,"title":{},"body":{"index.html":{}}}],["src/.../constants.ts",{"_index":488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":415,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../users.service.ts",{"_index":486,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:104",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:30",{"_index":54,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:36",{"_index":48,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:41",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:47",{"_index":51,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:54",{"_index":41,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:72",{"_index":26,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:86",{"_index":61,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:96",{"_index":58,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":166,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":168,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.module.ts",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:6",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":388,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt",{"_index":223,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":244,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":249,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":247,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local",{"_index":262,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts",{"_index":264,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:12",{"_index":268,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:7",{"_index":266,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/main.ts",{"_index":392,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/post.service.ts",{"_index":273,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post.service.ts:17",{"_index":289,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post.service.ts:34",{"_index":281,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post.service.ts:40",{"_index":292,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post.service.ts:51",{"_index":284,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post.service.ts:6",{"_index":277,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post.service.ts:9",{"_index":286,"title":{},"body":{"injectables/PostService.html":{}}}],["src/prisma.service.ts",{"_index":306,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma.service.ts:6",{"_index":309,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/user.service.ts",{"_index":312,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user.service.ts:12",{"_index":327,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user.service.ts:20",{"_index":330,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user.service.ts:37",{"_index":320,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user.service.ts:43",{"_index":325,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user.service.ts:54",{"_index":323,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user.service.ts:6",{"_index":317,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/users.module.ts",{"_index":359,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":361,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/users/users.service.ts:21",{"_index":365,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:8",{"_index":374,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":439,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":442,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":444,"title":{},"body":{"index.html":{}}}],["started",{"_index":417,"title":{"index.html":{}},"body":{}}],["starter",{"_index":430,"title":{},"body":{"index.html":{}}}],["statements",{"_index":383,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":466,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":251,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":238,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super.canactivate(context",{"_index":243,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":458,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":476,"title":{},"body":{"modules.html":{}}}],["table",{"_index":395,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":394,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":296,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["test",{"_index":447,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":450,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":449,"title":{},"body":{"index.html":{}}}],["tests",{"_index":446,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":456,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":311,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.login(req.user",{"_index":98,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.validateuser(username",{"_index":271,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.jwtservice.sign(payload",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.postservice.createpost",{"_index":122,"title":{},"body":{"controllers/AppController.html":{}}}],["this.postservice.deletepost",{"_index":135,"title":{},"body":{"controllers/AppController.html":{}}}],["this.postservice.post",{"_index":106,"title":{},"body":{"controllers/AppController.html":{}}}],["this.postservice.posts",{"_index":111,"title":{},"body":{"controllers/AppController.html":{}}}],["this.postservice.updatepost",{"_index":132,"title":{},"body":{"controllers/AppController.html":{}}}],["this.prisma.post.create",{"_index":302,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.delete",{"_index":305,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.findmany",{"_index":301,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.findunique",{"_index":293,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.post.update",{"_index":304,"title":{},"body":{"injectables/PostService.html":{}}}],["this.prisma.user.create",{"_index":352,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":355,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findmany",{"_index":351,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":348,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":354,"title":{},"body":{"injectables/UserService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":240,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.users.find(user",{"_index":379,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.createuser(userdata",{"_index":129,"title":{},"body":{"controllers/AppController.html":{}}}],["this.usersservice.findone(username",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":272,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["title",{"_index":114,"title":{},"body":{"controllers/AppController.html":{}}}],["touch",{"_index":467,"title":{},"body":{"index.html":{}}}],["true",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["twitter",{"_index":472,"title":{},"body":{"index.html":{}}}],["type",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":484,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":429,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":270,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unit",{"_index":445,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":483,"title":{},"body":{"properties.html":{}}}],["update",{"_index":347,"title":{},"body":{"injectables/UserService.html":{}}}],["updatepassword",{"_index":346,"title":{},"body":{"injectables/UserService.html":{}}}],["updatepost",{"_index":275,"title":{},"body":{"injectables/PostService.html":{}}}],["updatepost(params",{"_index":291,"title":{},"body":{"injectables/PostService.html":{}}}],["updateuser",{"_index":315,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(params",{"_index":324,"title":{},"body":{"injectables/UserService.html":{}}}],["use",{"_index":490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useclass",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":70,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard",{"_index":99,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":47,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(localauthguard",{"_index":94,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(localauthguard)@post('auth/login",{"_index":53,"title":{},"body":{"controllers/AppController.html":{}}}],["user",{"_index":76,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["user(userwhereuniqueinput",{"_index":326,"title":{},"body":{"injectables/UserService.html":{}}}],["user.password",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["user.userid",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["userdata",{"_index":62,"title":{},"body":{"controllers/AppController.html":{}}}],["userid",{"_index":259,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["usermodel",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["username",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["users",{"_index":316,"title":{},"body":{"injectables/UserService.html":{},"injectables/UsersService.html":{}}}],["users(params",{"_index":329,"title":{},"body":{"injectables/UserService.html":{}}}],["users.service",{"_index":360,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["userservice",{"_index":72,"title":{"injectables/UserService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":151,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":201,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userwhereuniqueinput",{"_index":328,"title":{},"body":{"injectables/UserService.html":{}}}],["using",{"_index":337,"title":{},"body":{"injectables/UserService.html":{}}}],["validate",{"_index":246,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":248,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":267,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateuser",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":367,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":389,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":487,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":481,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":440,"title":{},"body":{"index.html":{}}}],["website",{"_index":470,"title":{},"body":{"index.html":{}}}],["world",{"_index":170,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":461,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createDraft\n                            \n                            \n                                    \n                                    Async\n                                deletePost\n                            \n                            \n                                    \n                                    Async\n                                getFilteredPosts\n                            \n                            \n                                    \n                                    Async\n                                getPostById\n                            \n                            \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getPublishedPosts\n                            \n                            \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                publishPost\n                            \n                            \n                                    \n                                    Async\n                                signupUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createDraft\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDraft(postData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('post')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postData\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('post/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getFilteredPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFilteredPosts(searchString: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filtered-posts/:searchString')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                searchString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('post/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getPublishedPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublishedPosts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('feed')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('auth/login')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        publishPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    publishPost(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('publish/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        signupUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signupUser(userData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('user')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userData\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Request,\n  Get,\n  Param,\n  Post,\n  Body,\n  Put,\n  Delete,\n  UseGuards\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { PostService } from './post.service';\nimport { User as UserModel, Post as PostModel } from '@prisma/client';\nimport {LocalAuthGuard} from \"./auth/local-auth.guard\";\nimport {AuthService} from \"./auth/auth.service\";\nimport {JwtAuthGuard} from \"./auth/jwt-auth.guard\";\nimport { Public } from './auth/constants';\n\n@Controller()\nexport class AppController {\n  constructor(\n      private readonly userService: UserService,\n      private readonly postService: PostService,\n      private authService: AuthService\n  ) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Post('auth/login')\n  async login(@Request() req) {\n    return this.authService.login(req.user)\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n\n  @Get('post/:id') //fetch a single post by its id\n  async getPostById(@Param('id') id: string): Promise {\n    return this.postService.post({ id: Number(id) });\n  }\n\n  @Public()\n  @Get('feed') //Fetch all published posts\n  async getPublishedPosts(): Promise {\n    return this.postService.posts({\n      where: { published: true },\n    });\n  }\n\n  @Get('filtered-posts/:searchString') //Filter posts by title or content\n  async getFilteredPosts(\n      @Param('searchString') searchString: string,\n  ): Promise {\n    return this.postService.posts({\n      where: {\n        OR: [\n          {\n            title: { contains: searchString },\n          },\n          {\n            content: { contains: searchString },\n          },\n        ],\n      },\n    });\n  }\n\n  @Post('post') //create a new post\n  async createDraft(\n      @Body() postData: { title: string; content?: string; authorEmail: string },\n  ): Promise {\n    const { title, content, authorEmail } = postData;\n    return this.postService.createPost({\n      title, //required, the title of the post\n      content, //optional, the content of the post\n      author: {\n        connect: { email: authorEmail }, //required, the email of the user that creates the post\n      },\n    });\n  }\n\n  @Post('user') //create a new user\n  async signupUser(\n      @Body() userData: {\n        name?: string; //the name of the user\n        email: string //required the email adress of the user\n      },\n  ): Promise {\n    return this.userService.createUser(userData);\n  }\n\n  @Put('publish/:id') //publish a post by its id\n  async publishPost(@Param('id') id: string): Promise {\n    return this.postService.updatePost({\n      where: { id: Number(id) },\n      data: { published: true },\n    });\n  }\n\n  @Delete('post/:id') //delete a post by its id\n  async deletePost(@Param('id') id: string): Promise {\n    return this.postService.deletePost({ id: Number(id) });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPostService\n\nPostService\n\nAppModule -->\n\nPostService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PostService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport {UserService} from \"./user.service\";\nimport {PostService} from \"./post.service\";\nimport {PrismaService} from \"./prisma.service\";\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [AuthModule, UsersModule],\n  controllers: [AppController],\n  providers: [AppService, UserService, PostService, PrismaService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalStrategy } from './local.strategy';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\nimport {JwtStrategy} from \"./jwt.strategy\";\nimport {APP_GUARD} from \"@nestjs/core\";\nimport {JwtAuthGuard} from \"./jwt-auth.guard\";\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy, {provide: APP_GUARD, useClass: JwtAuthGuard,}],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        private usersService: UsersService,\n        private jwtService: JwtService\n    ) {}\n\n    async validateUser(username: string, pass: string): Promise {\n        const user = await this.usersService.findOne(username);\n        if (user && user.password === pass) {\n            const { password, ...result } = user;\n            return result;\n        }\n        return null;\n    }\n\n    async login(user: any) {\n        const payload = { username: user.username, sub: user.userId };\n        return {\n            access_token: this.jwtService.sign(payload),\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt-auth.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {ExecutionContext, Injectable} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport {Reflector} from \"@nestjs/core\";\nimport {IS_PUBLIC_KEY} from \"./constants\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n            context.getHandler(),\n            context.getClass(),\n        ]);\n        if (isPublic) {\n            return true;\n        }\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor() {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: jwtConstants.secret,\n        });\n    }\n\n    async validate(payload: any) {\n        return { userId: payload.sub, username: payload.username };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/local.strategy.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(private authService: AuthService) {\n        super();\n    }\n\n    async validate(username: string, password: string): Promise {\n        const user = await this.authService.validateUser(username, password);\n        if (!user) {\n            throw new UnauthorizedException();\n        }\n        return user;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                post\n                            \n                            \n                                    Async\n                                posts\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/post.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(data: Prisma.PostCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Prisma.PostCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(where: Prisma.PostWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                        Prisma.PostWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                        \n                    post(postWhereUniqueInput: Prisma.PostWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postWhereUniqueInput\n                                            \n                                                        Prisma.PostWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        posts\n                        \n                    \n                \n            \n            \n                \n                        \n                    posts(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\nimport { Post, Prisma } from '@prisma/client';\n\n@Injectable()\nexport class PostService {\n    constructor(private prisma: PrismaService) {}\n\n    async post(\n        postWhereUniqueInput: Prisma.PostWhereUniqueInput,\n    ): Promise {\n        return this.prisma.post.findUnique({\n            where: postWhereUniqueInput,\n        });\n    }\n\n    async posts(params: {\n        skip?: number;\n        take?: number;\n        cursor?: Prisma.PostWhereUniqueInput;\n        where?: Prisma.PostWhereInput;\n        orderBy?: Prisma.PostOrderByWithRelationInput;\n    }): Promise {\n        const { skip, take, cursor, where, orderBy } = params;\n        return this.prisma.post.findMany({\n            skip,\n            take,\n            cursor,\n            where,\n            orderBy,\n        });\n    }\n\n    async createPost(data: Prisma.PostCreateInput): Promise {\n        return this.prisma.post.create({\n            data,\n        });\n    }\n\n    async updatePost(params: {\n        where: Prisma.PostWhereUniqueInput;\n        data: Prisma.PostUpdateInput;\n    }): Promise {\n        const { data, where } = params;\n        return this.prisma.post.update({\n            data,\n            where,\n        });\n    }\n\n    async deletePost(where: Prisma.PostWhereUniqueInput): Promise {\n        return this.prisma.post.delete({\n            where,\n        });\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n    async onModuleInit() {\n        await this.$connect();\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                user\n                            \n                            \n                                    Async\n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(data: Prisma.UserCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            Prisma.UserCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(where: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            Prisma.UserWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        user\n                        \n                    \n                \n            \n            \n                \n                        \n                    user(userWhereUniqueInput: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userWhereUniqueInput\n                                            \n                                                            Prisma.UserWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        users\n                        \n                    \n                \n            \n            \n                \n                        \n                    users(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from './prisma.service'; //importing the Prisma Service that generated our Prisma Client for us\nimport { User, Prisma } from '@prisma/client'; //importing the affected model like so\n\n@Injectable()\nexport class UserService {\n    constructor(private prisma: PrismaService) {} //using PrismaClient here\n\n    //services are also the place to add business logic\n    //e.g: a function \"updatePassword\" to update password of a user\n\n    async user(\n        userWhereUniqueInput: Prisma.UserWhereUniqueInput,\n    ): Promise {\n        return this.prisma.user.findUnique({\n            where: userWhereUniqueInput,\n        });\n    }\n\n    async users(params: {\n        skip?: number;\n        take?: number;\n        cursor?: Prisma.UserWhereUniqueInput;\n        where?: Prisma.UserWhereInput;\n        orderBy?: Prisma.UserOrderByWithRelationInput;\n    }): Promise {\n        const { skip, take, cursor, where, orderBy } = params;\n        return this.prisma.user.findMany({\n            skip,\n            take,\n            cursor,\n            where,\n            orderBy,\n        });\n    }\n\n    async createUser(data: Prisma.UserCreateInput): Promise {\n        return this.prisma.user.create({\n            data,\n        });\n    }\n\n    async updateUser(params: {\n        where: Prisma.UserWhereUniqueInput;\n        data: Prisma.UserUpdateInput;\n    }): Promise {\n        const { where, data } = params;\n        return this.prisma.user.update({\n            data,\n            where,\n        });\n    }\n\n    async deleteUser(where: Prisma.UserWhereUniqueInput): Promise {\n        return this.prisma.user.delete({\n            where,\n        });\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\n\n@Module({\n  providers: [UsersService],\n  exports: [UsersService]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n        {\n            userId: 1,\n            username: 'john',\n            password: 'changeme',\n        },\n        {\n            userId: 2,\n            username: 'maria',\n            password: 'guess',\n        },\n    ]\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n// This should be a real class/interface representing a user entity\nexport type User = any;\n\n@Injectable()\nexport class UsersService {\n    private readonly users = [\n        {\n            userId: 1,\n            username: 'john',\n            password: 'changeme',\n        },\n        {\n            userId: 2,\n            username: 'maria',\n            password: 'guess',\n        },\n    ];\n\n    async findOne(username: string): Promise {\n        return this.users.find(user => user.username === username);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.1.1\n        \n            @nestjs/passport : ^10.0.2\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.1.14\n        \n            @prisma/client : ^5.5.2\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPostService\n\nPostService\n\nAppModule -->\n\nPostService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            User   (src/.../users.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/users.service.ts\n    \n    \n        \n            \n                \n                    \n                    User\n                \n            \n            \n                \n                            any\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IS_PUBLIC_KEY   (src/.../constants.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            Public   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    secret: 'DO NOT USE THIS VALUE. INSTEAD, CREATE A COMPLEX SECRET AND KEEP IT SAFE OUTSIDE OF THE SOURCE CODE.',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
